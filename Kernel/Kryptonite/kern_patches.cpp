//
//  kern_patches.cpp
//  Kryptonite
//
//  Created by Mayank Kumar on 6/4/21.
//

#include "kern_patches.hpp"
#include "kern_nvramargs.hpp"
#include "kern_patchapplicator.hpp"
#include "kern_compatibility.hpp"

static PatchApplicator patchApplicator;

void Patches::unblockLegacyThunderbolt(KernelPatcher &patcher, KernelPatcher::KextInfo *kext, NVRAMArgs* args) {
    if (args->isAMD()) {
        KernelPatcher::LookupPatch patch;
        
        if (Compatibility::isOlderKernel()) {
            uint8_t tbType = 0x33;
            if (args->isThunderbolt1()) {
                tbType = 0x31;
            } else if (args->isThunderbolt2()) {
                tbType = 0x32;
            }
            const uint8_t find[] = {0x49, 0x4f, 0x54, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6c, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x33};
            const uint8_t repl[] = {0x49, 0x4f, 0x54, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6c, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, tbType};
            patch = {kext, find, repl, sizeof(find), 1};
        } else {
            const uint8_t find[] = {0xf8, 0x03, 0x0f, 0x82, 0x78, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x06, 0xc6, 0x80, 0x78, 0x01, 0x00};
            const uint8_t repl[] = {0xf8, 0x00, 0x0f, 0x82, 0x78, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x06, 0xc6, 0x80, 0x78, 0x01, 0x00};
            patch = {kext, find, repl, sizeof(find), 1};
        }
        patchApplicator.applyLookupPatch(patcher, &patch);
    }
}
